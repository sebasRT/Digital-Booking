# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:
    - build
    - deploy

build_backend:
    stage: build
    image:  maven:3.8.6-openjdk-18
    script:
        - cd back
        - echo "Building app..."
        - mvn clean install
        - echo "Finished building the app."
    artifacts:
        expire_in: 1 week
        paths:
            - back/target/booking-0.0.1-SNAPSHOT.jar

build_frontend :
    stage: build
    image: node:latest
    script:
        - echo "Building the app"
        - cd front
        - ls 
        - npm --force install
        - CI=false npm run build
        - cd build 
        - ls
        - cd ..
        - pwd
    artifacts:
        expire_in: 1 week
        name: react_build
        paths:
        - ./front/build/

deploy_Backend:
    stage: deploy
    needs: [build_backend]
    image: alpine:3.11
    before_script:
        - apk update && apk add openssh-client bash
        - mkdir -p ~/ssh
        - chmod 700 ~/ssh
        - eval $(ssh-agent -s)
        - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
        - touch ~/ssh/config
        - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/ssh/config
        - ssh-keyscan -H "$DEPLOY_SERVER_IP" >> ~/ssh/known_hosts
        - chmod 644 ~/ssh/known_hosts
    script:
        - echo "Deploying started..."
        - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl stop consoleapp.service"
        - scp back/target/booking-0.0.1-SNAPSHOT.jar ubuntu@$DEPLOY_SERVER_IP:~/console-app/
        - ssh ubuntu@$DEPLOY_SERVER_IP "sudo systemctl start consoleapp.service"
        - echo "Finished deploying the app."

deploy_Frontend:
   stage: deploy
   needs: [build_frontend]
   image: python:latest 
   script:
      - cd /builds/ctd/hispanos/proyecto-integrador-1/proyecto-integrador-0223/0621pt-c7/grupo-11/front/build
      - ls
      - pwd   
      - cd /builds/ctd/proyecto-integrador-1022/0222-ft-c1/grupo-11
      - ls
      - pip install awscli   
      - aws configure set aws_secret_key_id $AWS_ACCESS_KEY_ID
      - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
      - aws s3 sync /builds/ctd/hispanos/proyecto-integrador-1/proyecto-integrador-0223/0621pt-c7/grupo-11/front/build s3://grupo4c1frontend
